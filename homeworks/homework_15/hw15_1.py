"""
–ó–∞–¥–∞–Ω–∏–µ ‚Ññ6
üìå –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∏ –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –ø—É—Ç—å –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ –ü–ö.
üìå –°–æ–±–µ—Ä–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º –≤ –≤–∏–¥–µ –æ–±—ä–µ–∫—Ç–æ–≤ namedtuple.
üìå –ö–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç —Ö—Ä–∞–Ω–∏—Ç:
‚óã –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞,
‚óã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ —Ñ–∞–π–ª,
‚óã —Ñ–ª–∞–≥ –∫–∞—Ç–∞–ª–æ–≥–∞,
‚óã –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞.
üìå –í –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–±–æ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∏—Å–ø–æ–ª—å–∑—É—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.
"""

import os
from collections import namedtuple
import logging
import argparse

logging.basicConfig(filename='hw15_1.log',
                    filemode='a',
                    encoding='utf-8',
                    format='{levelname} - {asctime} –≤ —Å—Ç—Ä–æ–∫–µ {lineno} : {msg}',
                    style='{',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

Folder_object = namedtuple('Folder_object', ['name', 'directory', 'extension', 'parents_directory'])

parser = argparse.ArgumentParser(description='–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏')
parser.add_argument('-path', type=str)
args = parser.parse_args()


def traverse_directory(directory_path):
    if os.path.exists(directory_path):
        logger.info(f'–ö–∞—Ç–∞–ª–æ–≥–∏ –∏ —Ñ–∞–π–ª—ã, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã–µ –≤ {directory_path}')
        for dir_paths, dir_names, file_names in os.walk(directory_path):
            for dir_name in dir_names:
                logger.info(Folder_object(dir_name, True, 'no ext', os.path.basename(dir_paths)))
            for file in file_names:
                logger.info(Folder_object(file.rsplit('.')[0], False,
                                          file.rsplit('.')[1] if len(file.rsplit('.')) == 2 else 'no ext',
                                          os.path.basename(dir_paths)))
    else:
        logger.info(f'–ö–∞—Ç–∞–ª–æ–≥–∞ {directory_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')


# c —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å:
# def traverse_directory(directory_path):
#     if os.path.exists(directory_path):
#         result = []
#         for dir_paths, dir_names, file_names in os.walk(directory_path):
#             for dir_name in dir_names:
#                 result.append(
#                     {'name': dir_name, 'directory': True, 'extension': 'no ext',
#                      'parents_directory': os.path.basename(dir_paths)})
#             for file in file_names:
#                 result.append({'name': file.rsplit('.')[0], 'directory': False,
#                                'extension': file.rsplit('.')[1] if len(file.rsplit('.')) == 2 else 'no ext',
#                                'parents_directory': os.path.basename(dir_paths)})
#         return result
#     else:
#         return '–¢–∞–∫–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!'


if __name__ == '__main__':
    print(args)
    # traverse_directory('C:\Elena\GeekBrains\diving_into_python\lecture')
    traverse_directory(args.path)
